"""
Django settings for Cheerios project.

Generated by 'django-admin startproject' using Django 1.9.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""
import os
import redis
from mongoengine import connect
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
OUT_DIR = os.path.join(BASE_DIR, "out")
CHEERIOS_DIR = os.path.join(BASE_DIR, "cheerios")
LOG_DIR = OUT_DIR

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'la4y323-irt^y1e@44a=bh@afkew8=93^*tywk9*af$h=x_i_s'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", True)
if DEBUG == 'False':
    DEBUG = False

ALLOWED_HOSTS = ['*']

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework_docs',
    'rest_framework',
    'cheerios.analytics',
    'corsheaders',
    'cheerios.feeds',
    'cheerios.triviaweb',
    'gunicorn'
]

MIDDLEWARE_CLASSES = [
    'django.contrib.sessions.middleware.SessionMiddleware',
    'cheerios.authenticationmiddleware.SessionManagement',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.middleware.gzip.GZipMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = 'cheerios.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'cheerios.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

MONGODB = os.environ.get("MONGODB", 'buzztime_test')
MONGOHOST = os.environ.get("MONGOHOST", '127.0.0.1')
MONGOPORT = os.environ.get("MONGOPORT", 27017)
connect(MONGODB, host=MONGOHOST, port=MONGOPORT)

REDISHOST = os.environ.get("REDISHOST", '127.0.0.1')
REDISPORT = os.environ.get("REDISPORT", 6379)
REDISDB = redis.StrictRedis(host=REDISHOST, port=REDISPORT, db=0,\
    decode_responses=True, socket_connect_timeout=2, socket_timeout=2)

MSSQLDBPROG = os.environ.get("MSSQLDBPROG", 'Programming')
MSSQLDBGAMEPLAY = os.environ.get("MSSQLDBGAMEPLAY", 'dbGamePlay')
MSSQLUSERDB = os.environ.get("MSSQLDBGAMEPLAY", 'UserDB')
MSSQLPLAYERPLUSDB = os.environ.get("MSSQLPLAYERPLUSDB", 'DBPLAYERPLUS')
MSSQLHOST = os.environ.get("MSSQLHOST", '216.32.152.22')
MSSQLUSER = os.environ.get("MSSQLUSER", 'PlatformServices')
MSSQLPASSWORD = os.environ.get("MSSQLPASSWORD", 'F3atureR!ch')

CRISPAPIKEY = os.environ.get("CRISPAPIKEY",
                             '24A501F37C53AD1CED5AABFE94942C664BC28CE678D6494D8E29A3515275A588')

NCRTTL = os.environ.get("NCRTTL", 60 * 30)
NCRPROMISETTL = os.environ.get("NCRTTL", 60 * 60 * 12)
NGNIXHOST = os.environ.get("NGNIXHOST", 'http://0.0.0.0:8080/')
LOGLEVEL = os.environ.get("LOGLEVEL", "DEBUG")

# Define Sportradar api key
SPORTRADAR_API_KEY = os.environ.get("SPORTRADAR_API_KEY", '68wha5twc627tfsd5g6yd6xd')
FIREBASE_KEY = os.environ.get("FIREBASE_KEY", 'https://test-5f485.firebaseio.com')

IMAGE_SERVER_PATH = os.environ.get("IMAGE_SERVER_PATH", CHEERIOS_DIR + "/")

# Define Bronto API Key
BRONTO_API_KEY = os.environ.get("BRONTO_API_KEY", '5495F026-355A-488E-B4C4-AE742DF9E6E0')



# Setting default renderer for all apis to JSONRenderer
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    )
}

REST_FRAMEWORK_DOCS = {
    'HIDE_DOCS': os.environ.get('HIDE_DRFDOCS', False)
}

# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/
STATIC_DIR = os.path.join(BASE_DIR, 'static')
STATIC_URL = '/static/'


# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(message)s'
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'file': {
            'level': LOGLEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'verbose',
            'filename': os.path.join(LOG_DIR, 'buzztime_app.log'),
            'maxBytes':1024 * 1024 * 5,
            'backupCount':10
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
        'sql': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOG_DIR, 'buzztime_app.log'),
            'formatter': 'verbose'
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['file'],
            'level': 'ERROR',
            'propagate': True,
        },
        'buzztime': {
            'handlers': ['file'],
            'propagate': True,
            'format':'django: %(message)s',
            'level': 'DEBUG'
        },
        'django.db.backends': {
            'level': 'DEBUG',
            'handlers': ['sql'],
            'propagate': True,
        }
    }
}
